name: Go Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22.0]
        os: [linux, windows, darwin]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: List files in the current directory
        run: ls -lah

      - name: Dependencies
        run: env GOOS=${{ matrix.os }} GOARCH=amd64 go mod tidy

      - name: Build
        run: env GOOS=${{ matrix.os }} GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -v -o multicluster-cli-${{ matrix.os }}

      - name: Install UPX
        run: sudo apt-get install upx

      - name: Compress Binary with UPX
        run: upx --best --lzma multicluster-cli-${{ matrix.os }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: multicluster-cli-${{ matrix.os }}
          path: multicluster-cli-${{ matrix.os }}

  release:
    needs: build
    runs-on: ubuntu-latest
    #    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - name: List files in the current directory
        run: ls -lah

      - name: Zip the build directories
        run: |
          zip -r multicluster-cli-darwin.zip multicluster-cli-darwin || true
          zip -r multicluster-cli-linux.zip multicluster-cli-linux || true
          zip -r multicluster-cli-windows.zip multicluster-cli-windows || true

      - name: List files in the current directory
        run: ls -lah

      - name: Create Release
        uses: google-github-actions/release-please-action@v3
        id: create_release
        with:
          token: ${{ secrets.REPO_TOKEN }}
          release-type: go
          package-name: "multicluster-cli"

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Upload Artifact to Release
        run: |
          # Verifica se há algum tag existente
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            echo "No tags found. Creating an initial tag."
            LATEST_TAG="v1.0.0"  # Defina o nome do primeiro tag conforme necessário
            git tag "$LATEST_TAG"
            git push origin "$LATEST_TAG"
          fi
          
          # Verifica se há uma release associada ao tag
          if ! gh release view "$LATEST_TAG" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "No release found for the tag $LATEST_TAG. Creating a new release."
            gh release create "$LATEST_TAG" --repo ${{ github.repository }} --title "$LATEST_TAG" --notes "Initial release."
          fi
          
          # Obtem os assets da release
          ASSETS=$(gh release view $LATEST_TAG --repo ${{ github.repository }} --json assets -q '.assets[].name')
          
          # Faz o uload dos arquivos .zip se ainda nao estiverem na release.
          for file in *.zip; do
            if echo "$ASSETS" | grep -q "^${file}$"; then
              echo "Asset ${file} already exists in the release. Skipping upload."
            else  
              gh release upload $LATEST_TAG "$file" --repo ${{ github.repository }}
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
